/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package preguntasFrecuentes;

import GUI.GuiPrincipal;
import Historial.NavigationManager;
import javax.swing.SwingUtilities;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import paqueteCosteoRapido.CosteoForm_Ingresar;
import productosFavoritos.FavoritosManager;
import productosFavoritos.ProductoFavorito;
import java.util.List;

/**
 *
 * @author mynit
 */
public class PreguntasFrecuentesForm extends javax.swing.JFrame {

    private String currentUser;
    /**
     * Creates new form PreguntasFrecuentesForm
     */
    public PreguntasFrecuentesForm(String username) {
        this.currentUser = username;
    initComponents();
    NavigationManager.getInstance().pushFrame(this);
    
    // Ajustar el layout despu√©s de initComponents
    Container contentPane = getContentPane();
    contentPane.removeAll();  // Remover todos los componentes
    contentPane.setLayout(new BorderLayout());
    contentPane.add(jScrollPane1, BorderLayout.CENTER);
    
    // Eliminar el scroll extra si existe
    if (jScrollPane2 != null) {
        remove(jScrollPane2);
    }
    
    setSize(600, 680);
    setLocationRelativeTo(null);
    setResizable(false);
    setupFAQs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        flechaIzquierda1 = new javax.swing.JButton();
        searchButton1 = new javax.swing.JButton();
        recargar1 = new javax.swing.JButton();
        menuButton1 = new javax.swing.JButton();
        bookmarkButton1 = new javax.swing.JButton();
        searchField1 = new javax.swing.JTextField();
        flechaDerecha1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(600, 680));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(178, 171, 171));
        jPanel1.setPreferredSize(new java.awt.Dimension(430, 600));
        jPanel1.setRequestFocusEnabled(false);

        jPanel3.setBackground(new java.awt.Color(178, 171, 171));

        flechaIzquierda1.setText("‚Üê");
        flechaIzquierda1.setToolTipText("");
        flechaIzquierda1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flechaIzquierda1ActionPerformed(evt);
            }
        });

        searchButton1.setText("üîç");
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });

        recargar1.setText("üîÑ");
        recargar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recargar1ActionPerformed(evt);
            }
        });

        menuButton1.setText("‚ò∞");
        menuButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButton1ActionPerformed(evt);
            }
        });

        bookmarkButton1.setText("‚ù§");
        bookmarkButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookmarkButton1ActionPerformed(evt);
            }
        });

        searchField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchField1ActionPerformed(evt);
            }
        });

        flechaDerecha1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        flechaDerecha1.setText("‚Üí");
        flechaDerecha1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flechaDerecha1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flechaIzquierda1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(flechaDerecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recargar1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchField1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 255, Short.MAX_VALUE)
                .addComponent(searchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookmarkButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookmarkButton1)
                    .addComponent(menuButton1)
                    .addComponent(flechaIzquierda1)
                    .addComponent(searchButton1)
                    .addComponent(flechaDerecha1)
                    .addComponent(recargar1))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI Variable", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 144, 47));
        jLabel1.setText("Productos");

        jLabel3.setText("Pregunta");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel3)
                .addContainerGap(293, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jLabel2.setText("Pregunta");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addContainerGap(301, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(231, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(530, 530, 530)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 207, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchField1ActionPerformed

    private void bookmarkButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookmarkButton1ActionPerformed
      try {
        // Usamos el FavoritosManager que ya est√° implementado
        FavoritosManager favoritosManager = new FavoritosManager();
        List<ProductoFavorito> favoritos = favoritosManager.obtenerFavoritosUsuario(currentUser);
        
        if (favoritos.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "No tienes productos favoritos guardados",
                "Sin Favoritos",
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Crear panel principal con layout vertical
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        
        // Agregar cada producto favorito al panel
        for (ProductoFavorito favorito : favoritos) {
            JPanel productoPanel = crearPanelProductoFavorito(favorito);
            mainPanel.add(productoPanel);
            mainPanel.add(Box.createRigidArea(new Dimension(0, 10))); // Espacio entre productos
        }

        // Agregar scroll al panel
        JScrollPane scrollPane = new JScrollPane(mainPanel);
        scrollPane.setPreferredSize(new Dimension(500, 400));
        
        // Mostrar el di√°logo con los favoritos
        JOptionPane.showMessageDialog(this, 
            scrollPane, 
            "Mis Productos Favoritos", 
            JOptionPane.PLAIN_MESSAGE);
            
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
            "Error al cargar favoritos: " + e.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_bookmarkButton1ActionPerformed


    private void menuButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButton1ActionPerformed
        // TODO add your handling code here:
    JPopupMenu popupMenu = new JPopupMenu();
   popupMenu.setBackground(Color.WHITE);
   popupMenu.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200)));

   // Crear los items del men√∫
   JMenuItem inicioItem = new JMenuItem("üè† Inicio");
JMenuItem perfilItem = new JMenuItem("üë§ Perfil");
JMenuItem costeoItem = new JMenuItem("üí∞ Costeo R√°pido");
JMenuItem productosItem = new JMenuItem("üì¶ Productos");
JMenuItem preguntasItem = new JMenuItem("‚ùì Preguntas Frecuentes");
JMenuItem historialItem = new JMenuItem("üìã Historial");
JMenuItem logoutItem = new JMenuItem("üö™ Cerrar Sesi√≥n");

   // Personalizar apariencia de los items
   Font menuFont = new Font("Segoe UI Emoji", Font.PLAIN, 14);
   Color hoverColor = new Color(240, 240, 240);
   
   for (JMenuItem item : new JMenuItem[]{inicioItem, perfilItem, costeoItem, 
       productosItem, preguntasItem, logoutItem}) {
       item.setFont(menuFont);
       item.setBackground(Color.WHITE);
       item.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
       item.setOpaque(true);
       
       // Efecto hover
       item.addMouseListener(new java.awt.event.MouseAdapter() {
           public void mouseEntered(java.awt.event.MouseEvent evt) {
               item.setBackground(hoverColor);
           }
           public void mouseExited(java.awt.event.MouseEvent evt) {
               item.setBackground(Color.WHITE);
           }
       });
   }

   // Agregar acciones a los items
   inicioItem.addActionListener(e -> {
       this.dispose();
       SwingUtilities.invokeLater(() -> {
           new GUI.GuiPrincipal(currentUser).setVisible(true);
       });
   });

   perfilItem.addActionListener(e -> {
       this.dispose();
       SwingUtilities.invokeLater(() -> {
           new perfilUsuario.PerfilUsuario(currentUser).setVisible(true);
       });
   });

   costeoItem.addActionListener(e -> {
       this.dispose();
       SwingUtilities.invokeLater(() -> {
           new paqueteCosteoRapido.CosteoForm_Ingresar(currentUser).setVisible(true);
       });
   });

   productosItem.addActionListener(e -> {
       this.dispose();
       SwingUtilities.invokeLater(() -> {
           new gestionProductos.Gui(currentUser).setVisible(true);
       });
   });

   preguntasItem.addActionListener(e -> {
       this.dispose();
       SwingUtilities.invokeLater(() -> {
           new preguntasFrecuentes.PreguntasFrecuentesForm(currentUser).setVisible(true);
       });
   });

   logoutItem.addActionListener(e -> {
       int confirm = JOptionPane.showConfirmDialog(
           this,
           "¬øEst√°s seguro de que quieres cerrar sesi√≥n?",
           "Confirmar Cierre de Sesi√≥n",
           JOptionPane.YES_NO_OPTION
       );
       
       if (confirm == JOptionPane.YES_OPTION) {
           this.dispose();
           SwingUtilities.invokeLater(() -> {
               new paqueteInicioSesion.LoginRegistroForm().setVisible(true);
           });
       }
   });

   // Agregar items al men√∫
   popupMenu.add(inicioItem);
   popupMenu.addSeparator();
   popupMenu.add(perfilItem);
   popupMenu.add(costeoItem);
   popupMenu.add(productosItem);
   popupMenu.add(preguntasItem);
   
   // Agregar gesti√≥n de usuarios solo para admin
   if ("admin".equals(currentUser)) {
       JMenuItem adminItem = new JMenuItem("\uD83D\uDC65 Gesti√≥n de Usuarios");
       adminItem.setFont(menuFont);
       adminItem.setBackground(Color.WHITE);
       adminItem.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
       adminItem.setOpaque(true);
       adminItem.addMouseListener(new java.awt.event.MouseAdapter() {
           public void mouseEntered(java.awt.event.MouseEvent evt) {
               adminItem.setBackground(hoverColor);
           }
           public void mouseExited(java.awt.event.MouseEvent evt) {
               adminItem.setBackground(Color.WHITE);
           }
       });
       adminItem.addActionListener(e -> {
           this.dispose();
           SwingUtilities.invokeLater(() -> {
               new gestionUsuarios.GestionUsuarios(currentUser).setVisible(true);
           });
       });
       popupMenu.add(adminItem);
   }
   
   popupMenu.addSeparator();
   popupMenu.addSeparator();
   popupMenu.add(logoutItem);

   // Mostrar el men√∫
   popupMenu.show(menuButton1, 0, menuButton1.getHeight());
    }//GEN-LAST:event_menuButton1ActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        // TODO add your handling code here:
        String searchText = searchField1.getText();
    if (searchText.equals("Buscar pregunta...")) {
        searchText = "";
    }
    searchQuestions(searchText);
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void flechaIzquierda1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flechaIzquierda1ActionPerformed
        // TODO add your handling code here:

        if (NavigationManager.getInstance().canGoBack()) {
        NavigationManager.getInstance().goBack();
        this.dispose(); // Importante: liberar los recursos de la ventana actual
    } else {
        JOptionPane.showMessageDialog(this, 
            "No hay p√°ginas anteriores", 
            "Informaci√≥n",
            JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_flechaIzquierda1ActionPerformed

    private void recargar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recargar1ActionPerformed
        // TODO add your handling code here:
        try {
        // Get current window location and size
        Point location = this.getLocation();
        Dimension size = this.getSize();
        boolean isMaximized = (this.getExtendedState() & JFrame.MAXIMIZED_BOTH) != 0;
        
        // Save current search field state
        String currentSearchText = searchField1.getText();
        boolean wasSearchingMode = !currentSearchText.equals("Buscar pregunta...");
        
        // Create and configure new window
        SwingUtilities.invokeLater(() -> {
            try {
                // Create new instance with same user
                PreguntasFrecuentesForm nuevaVentana = new PreguntasFrecuentesForm(currentUser);
                
                // Set window state
                if (isMaximized) {
                    nuevaVentana.setExtendedState(JFrame.MAXIMIZED_BOTH);
                } else {
                    nuevaVentana.setLocation(location);
                    nuevaVentana.setSize(size);
                }
                
                // Restore search if it was active
                if (wasSearchingMode) {
                    nuevaVentana.searchField1.setText(currentSearchText);
                    nuevaVentana.searchField1.setForeground(Color.BLACK);
                    nuevaVentana.searchQuestions(currentSearchText);
                }
                
                // Setup the FAQ panel
                nuevaVentana.setupFAQs();
                
                // Setup search functionality
                nuevaVentana.setupSearchField();
                
                // Show new window and dispose old one
                nuevaVentana.setVisible(true);
                dispose();
                
            } catch (Exception e) {
                logAndShowError("Error creating new window", e);
            }
        });
        
    } catch (Exception e) {
        logAndShowError("Error reloading window", e);
    }
    }//GEN-LAST:event_recargar1ActionPerformed

    private void flechaDerecha1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flechaDerecha1ActionPerformed
        // TODO add your handling code here:
            if (NavigationManager.getInstance().canGoForward()) {
        NavigationManager.getInstance().goForward();
        this.dispose(); // Importante: liberar los recursos de la ventana actual
    } else {
        JOptionPane.showMessageDialog(this, 
            "No hay p√°ginas para avanzar", 
            "Informaci√≥n",
            JOptionPane.INFORMATION_MESSAGE);
    }
        
    }//GEN-LAST:event_flechaDerecha1ActionPerformed

    private void logAndShowError(String message, Exception e) {
    // Log the full stack trace
    System.err.println(message);
    e.printStackTrace();
    
    // Show a user-friendly error message
    SwingUtilities.invokeLater(() -> {
        String errorDetails = e.getMessage() != null ? e.getMessage() : e.getClass().getSimpleName();
        JOptionPane.showMessageDialog(null,
            message + ": " + errorDetails,
            "Error",
            JOptionPane.ERROR_MESSAGE);
    });
}
    
    // M√©todo auxiliar para crear el panel de cada producto favorito
private JPanel crearPanelProductoFavorito(ProductoFavorito favorito) {
     JPanel panel = new JPanel();
    panel.setLayout(new BorderLayout(8, 8));
    panel.setBorder(BorderFactory.createCompoundBorder(
        BorderFactory.createLineBorder(new Color(180, 180, 180), 1, true),
        BorderFactory.createEmptyBorder(10, 10, 10, 10)
    ));
    panel.setBackground(Color.WHITE); // Fondo blanco limpio

    // Panel de informaci√≥n
    JPanel infoPanel = new JPanel();
    infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
    infoPanel.setBackground(Color.WHITE); // Fondo blanco
    infoPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
    
    // Nombre del producto en negrita y verde oscuro
    JLabel nombreLabel = new JLabel(favorito.getNombre());
    nombreLabel.setFont(new Font("SansSerif", Font.BOLD, 13));
    nombreLabel.setForeground(new Color(0, 128, 0)); // Verde oscuro
    infoPanel.add(nombreLabel);
    
    // Costo FOB en gris oscuro
    String detalles = String.format("<html><span style='color:gray;'>Costo FOB:</span> <span style='font-weight:bold;'>$%.2f</span></html>", 
                                    favorito.getCostoFobUSD());
    JLabel detallesLabel = new JLabel(detalles);
    detallesLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 0, 0));
    detallesLabel.setFont(new Font("SansSerif", Font.PLAIN, 12));
    infoPanel.add(detallesLabel);
    
    panel.add(infoPanel, BorderLayout.CENTER);

    // Panel de botones con dise√±o vertical y compacto
    JPanel botonesPanel = new JPanel();
    botonesPanel.setLayout(new BoxLayout(botonesPanel, BoxLayout.Y_AXIS));
    botonesPanel.setBackground(Color.WHITE); // Fondo blanco
    
    // Bot√≥n de costear en verde suave
    JButton costearButton = new JButton("Costear");
    costearButton.setBackground(new Color(0, 150, 0)); // Verde suave
    costearButton.setForeground(Color.WHITE);
    costearButton.setFont(new Font("SansSerif", Font.PLAIN, 11));
    costearButton.setFocusPainted(false);
    costearButton.setAlignmentX(Component.CENTER_ALIGNMENT);
    costearButton.setMaximumSize(new Dimension(80, 25));
    costearButton.addActionListener(e -> costearProductoFavorito(favorito));
    botonesPanel.add(costearButton);
    botonesPanel.add(Box.createRigidArea(new Dimension(0, 5))); // Espacio entre botones

    // Bot√≥n de eliminar en gris oscuro
    JButton eliminarButton = new JButton("Eliminar");
    eliminarButton.setBackground(new Color(60, 60, 60)); // Gris oscuro
    eliminarButton.setForeground(Color.WHITE);
    eliminarButton.setFont(new Font("SansSerif", Font.PLAIN, 11));
    eliminarButton.setFocusPainted(false);
    eliminarButton.setAlignmentX(Component.CENTER_ALIGNMENT);
    eliminarButton.setMaximumSize(new Dimension(80, 25));
    eliminarButton.addActionListener(e -> eliminarProductoFavorito(favorito));
    botonesPanel.add(eliminarButton);

    panel.add(botonesPanel, BorderLayout.EAST);

    return panel;
}

// M√©todo para costear un producto favorito
private void costearProductoFavorito(ProductoFavorito favorito) {
    SwingUtilities.invokeLater(() -> {
        CosteoForm_Ingresar costeoForm = new CosteoForm_Ingresar(
            currentUser,
            favorito.getNombre(),
            favorito.getCostoFobUSD(),
            0.0, // Flete por defecto
            favorito.getMargen() * 100 // Convertir margen a porcentaje
        );
        costeoForm.setVisible(true);
        this.dispose();
    });
}

// M√©todo para eliminar un producto favorito
private void eliminarProductoFavorito(ProductoFavorito favorito) {
    int confirmacion = JOptionPane.showConfirmDialog(this,
        "¬øEst√°s seguro de que deseas eliminar '" + favorito.getNombre() + "' de tus favoritos?",
        "Confirmar Eliminaci√≥n",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE);
        
    if (confirmacion == JOptionPane.YES_OPTION) {
        try {
            FavoritosManager favoritosManager = new FavoritosManager();
            favoritosManager.eliminarFavorito(favorito, currentUser);
            
            JOptionPane.showMessageDialog(this,
                "Producto eliminado de favoritos exitosamente",
                "√âxito",
                JOptionPane.INFORMATION_MESSAGE);
                
            // Actualizar la vista de favoritos
            bookmarkButton1ActionPerformed(null);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error al eliminar el favorito: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
}
 
 private void setupFAQs() {
    // Ajustar tama√±o de la ventana a un ancho mayor
    setSize(600, 680);
    setLocationRelativeTo(null);
    
    // Limpiar y configurar el panel principal
    jPanel1.removeAll();
    jPanel1.setLayout(new BorderLayout());
    jPanel1.setBackground(new Color(178, 171, 171));
    
    // Panel superior para la navegaci√≥n y t√≠tulo
    JPanel topPanel = new JPanel();
    topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.Y_AXIS));
    topPanel.setBackground(new Color(178, 171, 171));
    
    // Configurar panel de navegaci√≥n
    jPanel3.setPreferredSize(new Dimension(600, 35));
    jPanel3.setMaximumSize(new Dimension(600, 35));
    
    // Configurar t√≠tulo
    jLabel1.setText("Preguntas Frecuentes");
    jLabel1.setFont(new Font("Segoe UI", Font.BOLD, 22));
    jLabel1.setForeground(new Color(51, 102, 0));
    jLabel1.setAlignmentX(Component.CENTER_ALIGNMENT);
    
    // Panel para el t√≠tulo
    JPanel titlePanel = new JPanel();
    titlePanel.setBackground(new Color(178, 171, 171));
    titlePanel.add(jLabel1);
    
    // Agregar elementos al panel superior
    topPanel.add(jPanel3);
    topPanel.add(Box.createRigidArea(new Dimension(0, 5)));
    topPanel.add(titlePanel);
    topPanel.add(Box.createRigidArea(new Dimension(0, 5)));
    
    // Panel para las preguntas con padding extra al final
    JPanel questionsPanel = new JPanel();
    questionsPanel.setLayout(new BoxLayout(questionsPanel, BoxLayout.Y_AXIS));
    questionsPanel.setBackground(new Color(178, 171, 171));
    
    // Mantener el padding original
    questionsPanel.setBorder(BorderFactory.createEmptyBorder(10, 30, 50, 30));
    
    // Agregar preguntas
    addQuestionsToContainer(questionsPanel);
    
    // Crear un panel contenedor con padding extra al final
    JPanel containerPanel = new JPanel(new BorderLayout());
    containerPanel.setBackground(new Color(178, 171, 171));
    containerPanel.add(questionsPanel, BorderLayout.NORTH);
    // Agregar un panel vac√≠o al final para espacio extra
    containerPanel.add(Box.createRigidArea(new Dimension(0, 50)), BorderLayout.CENTER);
    
    // ScrollPane con las preguntas - Modificado para permitir scroll horizontal
    JScrollPane scrollPane = new JScrollPane(
        containerPanel,
        JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
        JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED  // Cambiado a AS_NEEDED
    );
    
    // Configurar el scroll horizontal
    scrollPane.getHorizontalScrollBar().setUnitIncrement(16);
    scrollPane.getVerticalScrollBar().setUnitIncrement(16);
    
    // Crear panel para la secci√≥n de contacto
    JPanel contactPanel = new JPanel();
    contactPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 0));
    contactPanel.setBackground(new Color(178, 171, 171));
    
    // Label "¬øNo encuentras tu pregunta?"
    JLabel contactLabel = new JLabel("¬øNo encuentras tu pregunta?");
    contactLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
    contactLabel.setForeground(new Color(51, 51, 51));
    
    // Bot√≥n de contacto estilizado como texto
    JButton contactButton = new JButton("Cont√°ctanos");
    contactButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
    contactButton.setForeground(new Color(51, 102, 0));
    contactButton.setBorderPainted(false);
    contactButton.setContentAreaFilled(false);
    contactButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
    
    // Agregar el evento al bot√≥n
    contactButton.addActionListener(e -> enviarPregunta());
    
    // Agregar componentes al panel de contacto
    contactPanel.add(contactLabel);
    contactPanel.add(contactButton);
    
    // Agregar el panel de contacto al topPanel despu√©s del t√≠tulo
    topPanel.add(Box.createRigidArea(new Dimension(0, 5)));
    topPanel.add(contactPanel);
    
    scrollPane.setBorder(null);
    scrollPane.setBackground(new Color(178, 171, 171));
    scrollPane.getViewport().setBackground(new Color(178, 171, 171));
    
    // Agregar los paneles al panel principal
    jPanel1.add(topPanel, BorderLayout.NORTH);
    jPanel1.add(scrollPane, BorderLayout.CENTER);
    
    // Configurar el campo de b√∫squeda
    setupSearchField();
}


private JPanel createQuestionPanel(String question, String answer) {
    JPanel panel = new JPanel();
    panel.setLayout(new BorderLayout(3, 3));
    panel.setBackground(new Color(255, 255, 255));
    panel.setBorder(BorderFactory.createCompoundBorder(
        BorderFactory.createLineBorder(new Color(200, 200, 200), 1),
        BorderFactory.createEmptyBorder(8, 8, 8, 8)
    ));
    

    
    // Panel para la pregunta con icono Q (cabecera)
    JPanel questionPanel = new JPanel(new BorderLayout());
    questionPanel.setBackground(new Color(245, 245, 245));
    questionPanel.setBorder(BorderFactory.createEmptyBorder(6, 6, 6, 6)); // Reducido de 8,8,8,8 a 6,6,6,6
    questionPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
    
    JPanel iconAndQuestion = new JPanel(new FlowLayout(FlowLayout.LEFT, 4, 0)); // Reducido el gap de 5 a 4
    iconAndQuestion.setBackground(new Color(245, 245, 245));
    
    // Icono Q
    JLabel iconLabel = new JLabel("Q");
    iconLabel.setFont(new Font("Segoe UI", Font.BOLD, 13)); // Reducido de 14 a 13
    iconLabel.setForeground(new Color(51, 102, 0));
    
    // Pregunta
    JLabel questionLabel = new JLabel(question);
    questionLabel.setFont(new Font("Segoe UI", Font.BOLD, 12)); // Reducido de 13 a 12
    
    iconAndQuestion.add(iconLabel);
    iconAndQuestion.add(questionLabel);
    
    // Icono de flecha
    JLabel arrowLabel = new JLabel("‚ñº");
    arrowLabel.setFont(new Font("Segoe UI", Font.BOLD, 11)); // Reducido de 12 a 11
    arrowLabel.setForeground(new Color(100, 100, 100));
    
    questionPanel.add(iconAndQuestion, BorderLayout.WEST);
    questionPanel.add(arrowLabel, BorderLayout.EAST);
    
    // Panel para la respuesta
    JPanel answerPanel = new JPanel();
    answerPanel.setLayout(new BorderLayout());
    answerPanel.setBackground(Color.WHITE);
    answerPanel.setBorder(BorderFactory.createEmptyBorder(8, 12, 4, 12)); // Reducido de 10,15,5,15 a 8,12,4,12
    
    JLabel answerLabel = new JLabel(answer);
    answerLabel.setFont(new Font("Segoe UI", Font.PLAIN, 11)); // Reducido de 12 a 11
    answerPanel.add(answerLabel);
    
    // Inicialmente ocultar la respuesta
    answerPanel.setVisible(false);
    
    // Agregar el manejador de clics
    questionPanel.addMouseListener(new MouseAdapter() {
        public void mouseClicked(MouseEvent e) {
            boolean isVisible = answerPanel.isVisible();
            answerPanel.setVisible(!isVisible);
            arrowLabel.setText(isVisible ? "‚ñº" : "‚ñ≤");
            panel.revalidate();
            panel.repaint();
        }
        
        public void mouseEntered(MouseEvent e) {
            questionPanel.setBackground(new Color(235, 235, 235));
            iconAndQuestion.setBackground(new Color(235, 235, 235));
        }
        
        public void mouseExited(MouseEvent e) {
            questionPanel.setBackground(new Color(245, 245, 245));
            iconAndQuestion.setBackground(new Color(245, 245, 245));
        }
    });
    
    panel.add(questionPanel, BorderLayout.NORTH);
    panel.add(answerPanel, BorderLayout.CENTER);
    
    return panel;
}

private void addQuestionsToContainer(JPanel container) {
    String[][] questions = {
        {"¬øQu√© es Costeo R√°pido de Box Security?",
         "<html><div style='width:310px'>" +
         "Costeo R√°pido Security es una herramienta dise√±ada para facilitar " +
         "el c√°lculo de costos de productos de seguridad, incluyendo variables " +
         "como costo FOB, flete, DAI y margen de venta." +
         "</div></html>"},
         
        {"¬øC√≥mo realizar un costeo r√°pido?",
         "<html><div style='width:310px'>" +
         "1. Selecciona 'COSTEO R√ÅPIDO' en el men√∫ principal<br>" +
         "2. Ingresa el nombre o descripci√≥n del producto<br>" +
         "3. Ingresa el costo FOB en USD<br>" +
         "4. Ingresa el porcentaje de flete<br>" +
         "5. Selecciona la clasificaci√≥n DAI<br>" +
         "6. Ingresa el margen de venta<br>" +
         "7. Presiona 'COSTEO R√ÅPIDO'" +
         "</div></html>"},

        {"¬øQu√© datos necesito para hacer un costeo?",
         "<html><div style='width:310px'>" +
         "Necesitas:<br>" +
         "‚Ä¢ Nombre o descripci√≥n del producto<br>" +
         "‚Ä¢ Costo FOB en USD<br>" +
         "‚Ä¢ Porcentaje de flete<br>" +
         "‚Ä¢ Clasificaci√≥n DAI (seleccionar de la lista)<br>" +
         "‚Ä¢ Margen de venta deseado" +
         "</div></html>"},

        {"¬øC√≥mo funciona la clasificaci√≥n DAI?",
         "<html><div style='width:310px'>" +
         "El sistema maneja las siguientes clasificaciones:<br>" +
         "‚Ä¢ C√°mara 0%<br>" +
         "‚Ä¢ Acceso 0%<br>" +
         "‚Ä¢ Metal 15%<br>" +
         "‚Ä¢ Grabador 15%<br>" +
         "‚Ä¢ Aluminio 10%" +
         "</div></html>"},

        {"¬øQu√© productos puedo gestionar en el sistema?",
         "<html><div style='width:310px'>" +
         "El sistema est√° configurado para:<br>" +
         "‚Ä¢ C√°maras<br>" +
         "‚Ä¢ Sistemas de almacenamiento<br>" +
         "‚Ä¢ Accesorios CCTV<br>" +
         "‚Ä¢ Control de acceso y seguridad<br>" +
         "‚Ä¢ Sistemas de red" +
         "</div></html>"},

        {"¬øC√≥mo buscar productos existentes?",
         "<html><div style='width:310px'>" +
         "Puedes buscar por:<br>" +
         "‚Ä¢ Nombre del producto<br>" +
         "‚Ä¢ Tipo de producto<br>" +
         "‚Ä¢ Marca<br>" +
         "‚Ä¢ Etiquetas<br>" +
         "El buscador mostrar√° sugerencias mientras escribes" +
         "</div></html>"},

        {"¬øC√≥mo funciona la gesti√≥n de usuarios?",
         "<html><div style='width:310px'>" +
         "El administrador puede:<br>" +
         "‚Ä¢ Ver lista de usuarios<br>" +
         "‚Ä¢ Editar usuarios existentes<br>" +
         "‚Ä¢ Eliminar usuarios<br>" +
         "‚Ä¢ Modificar informaci√≥n de contacto" +
         "</div></html>"},

        {"¬øC√≥mo recuperar mi contrase√±a?",
         "<html><div style='width:310px'>" +
         "Para recuperar tu contrase√±a:<br>" +
         "1. Haz clic en '¬øOlvidaste tu contrase√±a?'<br>" +
         "2. Ingresa tu correo registrado<br>" +
         "3. Recibir√°s un c√≥digo por correo<br>" +
         "4. Ingresa el c√≥digo y establece nueva contrase√±a" +
         "</div></html>"},

        {"¬øC√≥mo enviar una solicitud de pedido?",
         "<html><div style='width:310px'>" +
         "Para enviar una solicitud:<br>" +
         "1. Realiza el costeo del producto<br>" +
         "2. En la pantalla de costeo final, selecciona 'Mandar solicitud de pedido'<br>" +
         "3. Ingresa el correo del destinatario<br>" +
         "4. Confirma el env√≠o" +
         "</div></html>"},

        {"¬øC√≥mo se calcula el precio final?",
         "<html><div style='width:310px'>" +
         "El sistema calcula autom√°ticamente:<br>" +
         "‚Ä¢ Costo FOB USD<br>" +
         "‚Ä¢ Costo USD (incluyendo flete y DAI)<br>" +
         "‚Ä¢ Costo en Quetzales<br>" +
         "‚Ä¢ Precio de venta<br>" +
         "‚Ä¢ Precio con IVA" +
         "</div></html>"},

        {"¬øC√≥mo funciona la b√∫squeda inteligente?",
         "<html><div style='width:310px'>" +
         "El buscador inteligente:<br>" +
         "‚Ä¢ Muestra sugerencias en tiempo real<br>" +
         "‚Ä¢ Busca coincidencias parciales<br>" +
         "‚Ä¢ Ordena resultados por relevancia<br>" +
         "‚Ä¢ Permite seleccionar productos sugeridos" +
         "</div></html>"},

        {"¬øQu√© informaci√≥n se muestra en el costeo final?",
         "<html><div style='width:310px'>" +
         "El costeo final muestra:<br>" +
         "‚Ä¢ Nombre del producto<br>" +
         "‚Ä¢ Costo FOB USD<br>" +
         "‚Ä¢ Costo USD final<br>" +
         "‚Ä¢ Costo en Quetzales<br>" +
         "‚Ä¢ Precio de venta<br>" +
         "‚Ä¢ Precio con IVA<br>" +
         "‚Ä¢ Margen aplicado" +
         "</div></html>"},
        
        {"¬øC√≥mo agregar nuevos productos?",
         "<html><div style='width:310px'>" +
         "Para agregar productos:<br>" +
         "1. Ve a la secci√≥n de productos<br>" +
         "2. Haz clic en 'Agregar'<br>" +
         "3. Completa los campos requeridos<br>" +
         "‚Ä¢ Nombre<br>" +
         "‚Ä¢ Precio<br>" +
         "‚Ä¢ Tipo<br>" +
         "‚Ä¢ Marca<br>" +
         "‚Ä¢ Etiquetas" +
         "</div></html>"},

        {"¬øC√≥mo editar productos existentes?",
         "<html><div style='width:310px'>" +
         "Para editar un producto:<br>" +
         "1. Busca el producto<br>" +
         "2. Selecciona 'Editar'<br>" +
         "3. Modifica los campos necesarios<br>" +
         "4. Guarda los cambios" +
         "</div></html>"},

        {"¬øQu√© hace el bot√≥n de reset en el costeo?",
         "<html><div style='width:310px'>" +
         "El bot√≥n de reset:<br>" +
         "‚Ä¢ Limpia todos los campos del formulario<br>" +
         "‚Ä¢ Restaura valores por defecto<br>" +
         "‚Ä¢ Permite iniciar un nuevo costeo<br>" +
         "‚Ä¢ No afecta costeos guardados" +
         "</div></html>"}
            
    };
    
    for (String[] question : questions) {
        JPanel panel = createQuestionPanel(question[0], question[1]);
        container.add(panel);
        container.add(Box.createRigidArea(new Dimension(0, 5)));
    }
}

private String normalizeString(String input) {
    return java.text.Normalizer.normalize(input, java.text.Normalizer.Form.NFD)
        .replaceAll("\\p{InCombiningDiacriticalMarks}+", "")
        .toLowerCase();
}

private void searchQuestions(String searchText) {
    // Ignorar b√∫squeda si es el placeholder
    if (searchText.equals("Buscar pregunta...")) {
        return;
    }
    
    searchText = normalizeString(searchText.toLowerCase().trim());
    
    // Obtener el panel contenedor de preguntas
    JScrollPane scrollPane = null;
    for (Component comp : jPanel1.getComponents()) {
        if (comp instanceof JScrollPane) {
            scrollPane = (JScrollPane) comp;
            break;
        }
    }
    
    if (scrollPane != null) {
        JViewport viewport = scrollPane.getViewport();
        if (viewport.getView() instanceof JPanel) {
            JPanel containerPanel = (JPanel) viewport.getView();
            // Buscar el panel que contiene las preguntas
            for (Component comp : containerPanel.getComponents()) {
                if (comp instanceof JPanel) {
                    // Este es el panel que contiene las preguntas individuales
                    JPanel questionsPanel = (JPanel) comp;
                    for (Component questionComp : questionsPanel.getComponents()) {
                        if (questionComp instanceof JPanel) {
                            JPanel questionPanel = (JPanel) questionComp;
                            // Buscar en el panel de la pregunta
                            boolean found = false;
                            
                            // Obtener el panel del header que contiene la pregunta
                            Component headerPanel = questionPanel.getComponent(0);
                            if (headerPanel instanceof JPanel) {
                                for (Component c : ((JPanel) headerPanel).getComponents()) {
                                    if (c instanceof JPanel) {
                                        // Este es el panel que contiene el texto de la pregunta
                                        for (Component labelComp : ((JPanel) c).getComponents()) {
                                            if (labelComp instanceof JLabel && !((JLabel) labelComp).getText().equals("Q")) {
                                                String questionText = normalizeString(((JLabel) labelComp).getText());
                                                found = questionText.contains(searchText);
                                                if (found) break;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            questionPanel.setVisible(found || searchText.isEmpty());
                        }
                    }
                }
            }
            
            // Refrescar el contenedor
            containerPanel.revalidate();
            containerPanel.repaint();
        }
    }
}


private String stripHTML(String html) {
    return html.replaceAll("\\<.*?\\>", "")  // Elimina todas las etiquetas HTML
               .replaceAll("&nbsp;", " ")     // Reemplaza espacios HTML
               .replaceAll("&bull;", "‚Ä¢")     // Reemplaza bullets HTML
               .replaceAll("&middot;", "¬∑")   // Reemplaza puntos medios HTML
               .trim();                       // Elimina espacios al inicio y final
}

// Modificar el setupSearchField para hacer el campo de b√∫squeda m√°s ancho
private void setupSearchField() {
    // Hacer el campo de b√∫squeda m√°s ancho
    searchField1.setPreferredSize(new Dimension(250, searchField1.getPreferredSize().height));
    
    searchField1.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
        public void changedUpdate(javax.swing.event.DocumentEvent e) { 
            handleSearch(); 
        }
        public void removeUpdate(javax.swing.event.DocumentEvent e) { 
            handleSearch(); 
        }
        public void insertUpdate(javax.swing.event.DocumentEvent e) { 
            handleSearch(); 
        }
    });
    
    // Placeholder para el campo de b√∫squeda
    searchField1.setForeground(Color.GRAY);
    searchField1.setText("Buscar pregunta...");
    
    searchField1.addFocusListener(new java.awt.event.FocusListener() {
        @Override
        public void focusGained(java.awt.event.FocusEvent evt) {
            if (searchField1.getText().equals("Buscar pregunta...")) {
                searchField1.setText("");
                searchField1.setForeground(Color.BLACK);
            }
        }
        
        @Override
        public void focusLost(java.awt.event.FocusEvent evt) {
            if (searchField1.getText().isEmpty()) {
                searchField1.setForeground(Color.GRAY);
                searchField1.setText("Buscar pregunta...");
            }
        }
    });
}

private void handleSearch() {
    SwingUtilities.invokeLater(() -> {
        String searchText = searchField1.getText();
        if (searchText.equals("Buscar pregunta...")) {
            searchText = "";
        }
        searchQuestions(searchText);
    });
}


private void enviarPregunta() {
    // Crear panel principal con margen
    JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
    mainPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
    mainPanel.setBackground(Color.WHITE);

    // Panel superior para la informaci√≥n del usuario
    JPanel userInfoPanel = new JPanel(new GridLayout(3, 2, 5, 5));
    userInfoPanel.setBackground(Color.WHITE);
    userInfoPanel.setBorder(BorderFactory.createCompoundBorder(
        BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)),
        BorderFactory.createEmptyBorder(0, 0, 10, 0)
    ));

    // Etiquetas y campos - Usuario
    JLabel userLabel = new JLabel("Usuario:");
    userLabel.setFont(new Font("Segoe UI", Font.BOLD, 12));
    JLabel userValueLabel = new JLabel(currentUser);
    userValueLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
    userValueLabel.setForeground(new Color(51, 51, 51));
    userValueLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 10));

    // Etiquetas y campos - Correo (ahora como campo de texto)
    JLabel emailLabel = new JLabel("Tu correo:");
    emailLabel.setFont(new Font("Segoe UI", Font.BOLD, 12));
    JTextField emailField = new JTextField();
    emailField.setFont(new Font("Segoe UI", Font.PLAIN, 12));
    emailField.setBorder(BorderFactory.createCompoundBorder(
        BorderFactory.createLineBorder(new Color(200, 200, 200)),
        BorderFactory.createEmptyBorder(5, 5, 5, 5)
    ));
    emailField.setToolTipText("Ingresa tu correo electr√≥nico para recibir la respuesta");

    // Campo de asunto
    JLabel subjectLabel = new JLabel("Asunto:");
    subjectLabel.setFont(new Font("Segoe UI", Font.BOLD, 12));
    JTextField subjectField = new JTextField();
    subjectField.setFont(new Font("Segoe UI", Font.PLAIN, 12));
    subjectField.setBorder(BorderFactory.createCompoundBorder(
        BorderFactory.createLineBorder(new Color(200, 200, 200)),
        BorderFactory.createEmptyBorder(5, 5, 5, 5)
    ));

    // Agregar componentes al panel de informaci√≥n
    userInfoPanel.add(userLabel);
    userInfoPanel.add(userValueLabel);
    userInfoPanel.add(emailLabel);
    userInfoPanel.add(emailField);
    userInfoPanel.add(subjectLabel);
    userInfoPanel.add(subjectField);

    // Panel central para la pregunta
    JPanel questionPanel = new JPanel(new BorderLayout(5, 5));
    questionPanel.setBackground(Color.WHITE);
    
    JLabel questionLabel = new JLabel("Tu pregunta:");
    questionLabel.setFont(new Font("Segoe UI", Font.BOLD, 12));
    questionLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 5, 0));

    JTextArea questionArea = new JTextArea(8, 30);
    questionArea.setFont(new Font("Segoe UI", Font.PLAIN, 12));
    questionArea.setLineWrap(true);
    questionArea.setWrapStyleWord(true);
    questionArea.setBorder(BorderFactory.createCompoundBorder(
        BorderFactory.createLineBorder(new Color(200, 200, 200)),
        BorderFactory.createEmptyBorder(5, 5, 5, 5)
    ));

    JScrollPane scrollPane = new JScrollPane(questionArea);
    scrollPane.setBorder(BorderFactory.createEmptyBorder());

    questionPanel.add(questionLabel, BorderLayout.NORTH);
    questionPanel.add(scrollPane, BorderLayout.CENTER);

    // Agregar todos los paneles al panel principal
    mainPanel.add(userInfoPanel, BorderLayout.NORTH);
    mainPanel.add(questionPanel, BorderLayout.CENTER);

    // Panel de botones
    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
    buttonPanel.setBackground(Color.WHITE);
    buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 15, 15, 15));

    JButton cancelButton = new JButton("Cancelar");
    JButton sendButton = new JButton("Enviar Pregunta");
    
    // Estilizar botones
    sendButton.setBackground(new Color(51, 102, 0));
    sendButton.setForeground(Color.WHITE);
    sendButton.setFocusPainted(false);
    sendButton.setFont(new Font("Segoe UI", Font.BOLD, 12));
    
    cancelButton.setBackground(Color.WHITE);
    cancelButton.setFocusPainted(false);
    cancelButton.setFont(new Font("Segoe UI", Font.PLAIN, 12));

    buttonPanel.add(cancelButton);
    buttonPanel.add(sendButton);

    // Personalizar el di√°logo
    JDialog dialog = new JDialog(this, "Enviar Pregunta", true);
    dialog.setLayout(new BorderLayout());
    dialog.add(mainPanel, BorderLayout.CENTER);
    dialog.add(buttonPanel, BorderLayout.SOUTH);

    // Configurar acciones de botones
    sendButton.addActionListener(e -> {
        // Validar campos
        String email = emailField.getText().trim();
        String subject = subjectField.getText().trim();
        String question = questionArea.getText().trim();
        
        // Validar correo electr√≥nico
        if (!validarCorreo(email)) {
            JOptionPane.showMessageDialog(dialog,
                "Por favor, ingresa un correo electr√≥nico v√°lido.",
                "Campo inv√°lido",
                JOptionPane.WARNING_MESSAGE);
            emailField.requestFocus();
            return;
        }
        
        if (subject.isEmpty()) {
            JOptionPane.showMessageDialog(dialog,
                "Por favor, ingresa un asunto para tu pregunta.",
                "Campo requerido",
                JOptionPane.WARNING_MESSAGE);
            subjectField.requestFocus();
            return;
        }
        
        if (question.isEmpty()) {
            JOptionPane.showMessageDialog(dialog,
                "Por favor, escribe tu pregunta.",
                "Campo requerido",
                JOptionPane.WARNING_MESSAGE);
            questionArea.requestFocus();
            return;
        }
        
        enviarCorreo(subject, question, email);
        dialog.dispose();
    });

    cancelButton.addActionListener(e -> dialog.dispose());

    // Configurar y mostrar el di√°logo
    dialog.setSize(600, 680);
    dialog.setLocationRelativeTo(this);
    dialog.setResizable(false);
    dialog.setVisible(true);
}

private boolean validarCorreo(String email) {
    String regex = "^[A-Za-z0-9+_.-]+@(.+)$";
    return email.matches(regex);
}

private void enviarCorreo(String asunto, String pregunta, String correoUsuario) {
    Properties props = new Properties();
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", "true");
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.port", "587");

    final String username = "stylematezelda@gmail.com";
    final String password = "ucom vaej vocj tdvc";

    Session session = Session.getInstance(props,
        new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

    try {
        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(username));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(username));
        message.addRecipient(Message.RecipientType.CC, new InternetAddress(correoUsuario));
        message.setSubject("[Pregunta Box Security] " + asunto);
        
        String contenidoHTML = 
            "<html>" +
            "<body style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>" +
            "<div style='background-color: #336600; color: white; padding: 20px; text-align: center;'>" +
            "<h2 style='margin: 0;'>Nueva Pregunta - Box Security</h2>" +
            "</div>" +
            "<div style='padding: 20px; background-color: #f9f9f9;'>" +
            "<div style='background-color: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'>" +
            "<h3 style='color: #336600; margin-top: 0;'>Detalles de la Consulta</h3>" +
            "<p><strong>Usuario:</strong> " + currentUser + "</p>" +
            "<p><strong>Correo:</strong> " + correoUsuario + "</p>" +
            "<p><strong>Asunto:</strong> " + asunto + "</p>" +
            "<div style='background-color: #f5f5f5; padding: 15px; border-left: 4px solid #336600; margin: 10px 0;'>" +
            "<h4 style='margin-top: 0; color: #333;'>Pregunta:</h4>" +
            "<p style='margin-bottom: 0;'>" + pregunta.replace("\n", "<br>") + "</p>" +
            "</div>" +
            "</div>" +
            "<p style='color: #666; font-size: 12px; text-align: center; margin-top: 20px;'>" +
            "Este correo fue enviado desde el sistema de Box Security" +
            "</p>" +
            "</div>" +
            "</body>" +
            "</html>";

        message.setContent(contenidoHTML, "text/html; charset=utf-8");
        Transport.send(message);

        JOptionPane.showMessageDialog(this,
            "Tu pregunta ha sido enviada exitosamente.\nTe responderemos pronto a " + correoUsuario,
            "Mensaje Enviado",
            JOptionPane.INFORMATION_MESSAGE);

    } catch (MessagingException e) {
        JOptionPane.showMessageDialog(this,
            "Error al enviar el mensaje: " + e.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

// Modificar el evento del bot√≥n de b√∫squeda

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreguntasFrecuentesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreguntasFrecuentesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreguntasFrecuentesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreguntasFrecuentesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreguntasFrecuentesForm("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookmarkButton1;
    private javax.swing.JButton flechaDerecha1;
    private javax.swing.JButton flechaIzquierda1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton menuButton1;
    private javax.swing.JButton recargar1;
    private javax.swing.JButton searchButton1;
    private javax.swing.JTextField searchField1;
    // End of variables declaration//GEN-END:variables
}
