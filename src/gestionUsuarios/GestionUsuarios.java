/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gestionUsuarios;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import paqueteInicioSesion.AdministradorUsuario;
import GUI.GuiPrincipal;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import java.util.ArrayList;
import javax.swing.border.EmptyBorder;
import paqueteCosteoRapido.CosteoForm_Ingresar;
import productosFavoritos.FavoritosManager;
import productosFavoritos.ProductoFavorito;
/**
 *
 * @author mynit
 */
public class GestionUsuarios extends javax.swing.JFrame {

    /**
     * Creates new form GestionUsuarios
     */
    
    private String currentUser;
    private AdministradorUsuario adminUsuario;
    private DefaultTableModel tableModel;

    
     public GestionUsuarios() {
        this("admin"); 
    }
    public GestionUsuarios(String username) {
        this.currentUser = username;
        this.adminUsuario = new AdministradorUsuario();
        initComponents();
        setupTable();
        loadUsers();
        configurarBuscador();
        if (!"admin".equals(currentUser)) {
            JOptionPane.showMessageDialog(this, "Acceso no autorizado", "Error", JOptionPane.ERROR_MESSAGE);
            dispose();
            return;
        }
    }
    
   private void setupTable() {
    String[] columnNames = {"Usuario", "Email", "Contrase√±a"}; // Quitamos "Acciones"
    tableModel = new DefaultTableModel(columnNames, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Ninguna columna es editable
        }
        
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return String.class;
        }
    };
    jTable1.setModel(tableModel);
    
    // Configurar el renderer personalizado para la columna de contrase√±a
    jTable1.getColumnModel().getColumn(2).setCellRenderer(new TableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel label = new JLabel("********");
            label.setHorizontalAlignment(SwingConstants.CENTER);
            if (isSelected) {
                label.setBackground(table.getSelectionBackground());
                label.setForeground(table.getSelectionForeground());
            } else {
                label.setBackground(table.getBackground());
                label.setForeground(table.getForeground());
            }
            label.setOpaque(true);
            return label;
        }
    });
}

    private void loadUsers() {
    tableModel.setRowCount(0);
    List<String[]> usuarios = adminUsuario.listarUsuarios();
    
    for (String[] usuario : usuarios) {
        // No mostrar el usuario admin en la lista
        if (!"admin".equals(usuario[0])) {
            tableModel.addRow(new Object[]{
                usuario[0], 
                usuario[1], 
                "********" // Contrase√±a oculta
            });
        }
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnVerProductos = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        flechaIzquierda = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        recargar = new javax.swing.JButton();
        menuButton = new javax.swing.JButton();
        favoritos = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        flechaDerecha = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(178, 171, 171));

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 144, 47));
        jLabel2.setText("GESTI√ìN DE USUARIOS");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnVerProductos.setText("Ver Productos");
        btnVerProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerProductosActionPerformed(evt);
            }
        });

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(178, 171, 171));

        flechaIzquierda.setText("‚Üê");
        flechaIzquierda.setToolTipText("");

        searchButton.setText("üîç");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        recargar.setText("üîÑ");

        menuButton.setText("‚ò∞");
        menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonActionPerformed(evt);
            }
        });

        favoritos.setText("‚ù§");
        favoritos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favoritosActionPerformed(evt);
            }
        });

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        flechaDerecha.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        flechaDerecha.setText("‚Üí");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flechaIzquierda, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(flechaDerecha, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(recargar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(favoritos, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(favoritos)
                    .addComponent(menuButton)
                    .addComponent(flechaIzquierda)
                    .addComponent(searchButton)
                    .addComponent(flechaDerecha)
                    .addComponent(recargar))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnRegresar)
                .addGap(17, 17, 17))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnEditar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnEliminar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnVerProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(27, 27, 27)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar)
                    .addComponent(btnVerProductos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(btnRegresar)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow >= 0) {
        String username = (String) jTable1.getValueAt(selectedRow, 0);
        String email = (String) jTable1.getValueAt(selectedRow, 1);
        
        // Verificar si es el usuario admin
        if ("admin".equals(username)) {
            JOptionPane.showMessageDialog(this,
                "No se puede modificar el usuario administrador",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Mostrar di√°logo de edici√≥n
        JPanel panel = new JPanel(new GridLayout(0, 1, 5, 5));
        panel.setBorder(new EmptyBorder(10, 10, 10, 10));
        
        JTextField usernameField = new JTextField(username);
        JTextField emailField = new JTextField(email);
        JPasswordField passwordField = new JPasswordField();
        JCheckBox changePasswordCheckbox = new JCheckBox("Cambiar contrase√±a");
        
        panel.add(new JLabel("Usuario:"));
        panel.add(usernameField);
        panel.add(new JLabel("Email:"));
        panel.add(emailField);
        panel.add(changePasswordCheckbox);
        panel.add(new JLabel("Nueva contrase√±a:"));
        panel.add(passwordField);
        
        // Inicialmente deshabilitar el campo de contrase√±a
        passwordField.setEnabled(false);
        
        // Habilitar/deshabilitar campo de contrase√±a seg√∫n el checkbox
        changePasswordCheckbox.addActionListener(e -> 
            passwordField.setEnabled(changePasswordCheckbox.isSelected()));
        
        int result = JOptionPane.showConfirmDialog(null, panel, 
            "Editar Usuario", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        if (result == JOptionPane.OK_OPTION) {
            String nuevoUsuario = usernameField.getText().trim();
            String nuevoEmail = emailField.getText().trim();
            
            // Validar campos vac√≠os
            if (nuevoUsuario.isEmpty() || nuevoEmail.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                    "Todos los campos son obligatorios",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Validar formato de email
            if (!nuevoEmail.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
                JOptionPane.showMessageDialog(this,
                    "Por favor ingrese un email v√°lido",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            try {
                if (adminUsuario.actualizarUsuario(username, nuevoUsuario, nuevoEmail)) {
                    // Si se seleccion√≥ cambiar contrase√±a
                    if (changePasswordCheckbox.isSelected()) {
                        String nuevaContrasena = new String(passwordField.getPassword());
                        if (!nuevaContrasena.isEmpty()) {
                            if (adminUsuario.cambiarContrasena(nuevoEmail, nuevaContrasena)) {
                                JOptionPane.showMessageDialog(this,
                                    "Usuario y contrase√±a actualizados exitosamente",
                                    "√âxito",
                                    JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(this,
                                    "Usuario actualizado pero hubo un error al cambiar la contrase√±a",
                                    "Advertencia",
                                    JOptionPane.WARNING_MESSAGE);
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this,
                            "Usuario actualizado exitosamente",
                            "√âxito",
                            JOptionPane.INFORMATION_MESSAGE);
                    }
                    loadUsers();
                } else {
                    JOptionPane.showMessageDialog(this,
                        "No se pudo actualizar el usuario",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "Error al actualizar usuario: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(this,
            "Por favor seleccione un usuario para editar",
            "Aviso",
            JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow >= 0) {
        String username = (String) jTable1.getValueAt(selectedRow, 0);
        
        // Verificar si es el usuario admin
        if ("admin".equals(username)) {
            JOptionPane.showMessageDialog(this,
                "No se puede eliminar el usuario administrador",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Confirmar eliminaci√≥n
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "¬øEst√°s seguro de que quieres eliminar el usuario " + username + "?\n" +
            "Esta acci√≥n no se puede deshacer.",
            "Confirmar Eliminaci√≥n",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );
        
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                if (adminUsuario.eliminarUsuario(username)) {
                    JOptionPane.showMessageDialog(this,
                        "Usuario eliminado exitosamente",
                        "√âxito",
                        JOptionPane.INFORMATION_MESSAGE);
                    loadUsers(); // Recargar la tabla
                } else {
                    JOptionPane.showMessageDialog(this,
                        "No se pudo eliminar el usuario",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "Error al eliminar usuario: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(this,
            "Por favor seleccione un usuario para eliminar",
            "Aviso",
            JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnVerProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerProductosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnVerProductosActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
         SwingUtilities.invokeLater(() -> {
        new GuiPrincipal(currentUser).setVisible(true);
    });
    this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        realizarBusqueda();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButtonActionPerformed
        // TODO add your handling code here:
        JPopupMenu popupMenu = new JPopupMenu();
    popupMenu.setBackground(Color.WHITE);
    popupMenu.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200)));

    // Crear los items del men√∫
    JMenuItem inicioItem = new JMenuItem("\uD83C\uDFE0 Inicio");
    JMenuItem perfilItem = new JMenuItem("\uD83D\uDC64 Perfil");
    JMenuItem costeoItem = new JMenuItem("\uD83D\uDCB0 Costeo R√°pido");
    JMenuItem productosItem = new JMenuItem("\uD83D\uDCE6 Productos");
    JMenuItem preguntasItem = new JMenuItem("‚ùì Preguntas Frecuentes");
    JMenuItem logoutItem = new JMenuItem("\uD83D\uDEAA Cerrar Sesi√≥n");

    // Personalizar apariencia de los items
    Font menuFont = new Font("Arial", Font.PLAIN, 14);
    Color hoverColor = new Color(240, 240, 240);
    
    for (JMenuItem item : new JMenuItem[]{inicioItem, perfilItem, costeoItem, 
        productosItem, preguntasItem,  logoutItem}) {
        item.setFont(menuFont);
        item.setBackground(Color.WHITE);
        item.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        item.setOpaque(true);
        
        // Efecto hover
        item.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                item.setBackground(hoverColor);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                item.setBackground(Color.WHITE);
            }
        });
    }

    // Agregar acciones a los items
    inicioItem.addActionListener(e -> {
        this.dispose();
        SwingUtilities.invokeLater(() -> {
            new GUI.GuiPrincipal(currentUser).setVisible(true);
        });
    });

    perfilItem.addActionListener(e -> {
        this.dispose();
        SwingUtilities.invokeLater(() -> {
            new perfilUsuario.PerfilUsuario(currentUser).setVisible(true);
        });
    });

    costeoItem.addActionListener(e -> {
        this.dispose();
        SwingUtilities.invokeLater(() -> {
            new paqueteCosteoRapido.CosteoForm_Ingresar(currentUser).setVisible(true);
        });
    });

    productosItem.addActionListener(e -> {
        this.dispose();
        SwingUtilities.invokeLater(() -> {
            new gestionProductos.Gui(currentUser).setVisible(true);
        });
    });

    preguntasItem.addActionListener(e -> {
        this.dispose();
        SwingUtilities.invokeLater(() -> {
            new preguntasFrecuentes.PreguntasFrecuentesForm(currentUser).setVisible(true);
        });
    });

    

    logoutItem.addActionListener(e -> {
        int confirm = JOptionPane.showConfirmDialog(
            this,
            "¬øEst√°s seguro de que quieres cerrar sesi√≥n?",
            "Confirmar Cierre de Sesi√≥n",
            JOptionPane.YES_NO_OPTION
        );
        
        if (confirm == JOptionPane.YES_OPTION) {
            this.dispose();
            SwingUtilities.invokeLater(() -> {
                new paqueteInicioSesion.LoginRegistroForm().setVisible(true);
            });
        }
    });

    // Agregar items al men√∫
    popupMenu.add(inicioItem);
    popupMenu.addSeparator();
    popupMenu.add(perfilItem);
    popupMenu.add(costeoItem);
    popupMenu.add(productosItem);
    popupMenu.add(preguntasItem);
    
    // Agregar gesti√≥n de usuarios solo para admin
    if ("admin".equals(currentUser)) {
        JMenuItem adminItem = new JMenuItem("\uD83D\uDC65 Gesti√≥n de Usuarios");
        adminItem.setFont(menuFont);
        adminItem.setBackground(Color.WHITE);
        adminItem.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
        adminItem.setOpaque(true);
        adminItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                adminItem.setBackground(hoverColor);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                adminItem.setBackground(Color.WHITE);
            }
        });
        adminItem.addActionListener(e -> {
            this.dispose();
            SwingUtilities.invokeLater(() -> {
                new gestionUsuarios.GestionUsuarios(currentUser).setVisible(true);
            });
        });
        popupMenu.add(adminItem);
    }
    
    popupMenu.addSeparator();
  
    popupMenu.addSeparator();
    popupMenu.add(logoutItem);

    // Mostrar el men√∫
    popupMenu.show(menuButton, 0, menuButton.getHeight());
    }//GEN-LAST:event_menuButtonActionPerformed

    private void favoritosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favoritosActionPerformed
        // TODO add your handling code here:
        try {
        // Usamos el FavoritosManager que ya est√° implementado
        FavoritosManager favoritosManager = new FavoritosManager();
        List<ProductoFavorito> favoritos = favoritosManager.obtenerFavoritosUsuario(currentUser);
        
        if (favoritos.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "No tienes productos favoritos guardados",
                "Sin Favoritos",
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Crear panel principal con layout vertical
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        
        // Agregar cada producto favorito al panel
        for (ProductoFavorito favorito : favoritos) {
            JPanel productoPanel = crearPanelProductoFavorito(favorito);
            mainPanel.add(productoPanel);
            mainPanel.add(Box.createRigidArea(new Dimension(0, 10))); // Espacio entre productos
        }

        // Agregar scroll al panel
        JScrollPane scrollPane = new JScrollPane(mainPanel);
        scrollPane.setPreferredSize(new Dimension(500, 400));
        
        // Mostrar el di√°logo con los favoritos
        JOptionPane.showMessageDialog(this, 
            scrollPane, 
            "Mis Productos Favoritos", 
            JOptionPane.PLAIN_MESSAGE);
            
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
            "Error al cargar favoritos: " + e.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
    }
}                                               

// M√©todo auxiliar para crear el panel de cada producto favorito
private JPanel crearPanelProductoFavorito(ProductoFavorito favorito) {
    JPanel panel = new JPanel();
    panel.setLayout(new BorderLayout(10, 10));
    panel.setBorder(BorderFactory.createCompoundBorder(
        BorderFactory.createLineBorder(new Color(200, 200, 200)),
        BorderFactory.createEmptyBorder(10, 10, 10, 10)
    ));
    
    // Panel de informaci√≥n
    JPanel infoPanel = new JPanel();
    infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
    
    // Nombre del producto en negrita
    JLabel nombreLabel = new JLabel(favorito.getNombre());
    nombreLabel.setFont(new Font(nombreLabel.getFont().getName(), Font.BOLD, 14));
    infoPanel.add(nombreLabel);
    
    // Detalles del producto
    String detalles = String.format("<html>Costo FOB: $%.2f<br>" +
                                  "Costo Final USD: $%.2f<br>" +
                                  "Costo en Q.: Q%.2f<br>" +
                                  "Precio Venta: Q%.2f<br>" +
                                  "Margen: %.1f%%</html>",
        favorito.getCostoFobUSD(),
        favorito.getCostoUSDFinal(),
        favorito.getCostoQuetzales(),
        favorito.getPrecioVenta(),
        favorito.getMargen() * 100);
    
    JLabel detallesLabel = new JLabel(detalles);
    detallesLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 0, 0));
    infoPanel.add(detallesLabel);
    
    panel.add(infoPanel, BorderLayout.CENTER);
    
    // Panel de botones
    JPanel botonesPanel = new JPanel();
    botonesPanel.setLayout(new BoxLayout(botonesPanel, BoxLayout.Y_AXIS));
    
    // Bot√≥n de costear
    JButton costearButton = new JButton("Costear");
    costearButton.addActionListener(e -> costearProductoFavorito(favorito));
    botonesPanel.add(costearButton);
    botonesPanel.add(Box.createRigidArea(new Dimension(0, 5)));
    
    // Bot√≥n de eliminar
    JButton eliminarButton = new JButton("Eliminar");
    eliminarButton.addActionListener(e -> eliminarProductoFavorito(favorito));
    botonesPanel.add(eliminarButton);
    
    panel.add(botonesPanel, BorderLayout.EAST);
    
    return panel;
    }//GEN-LAST:event_favoritosActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
        realizarBusqueda();
    }//GEN-LAST:event_searchFieldActionPerformed

    
    // M√©todo para costear un producto favorito
private void costearProductoFavorito(ProductoFavorito favorito) {
    SwingUtilities.invokeLater(() -> {
        CosteoForm_Ingresar costeoForm = new CosteoForm_Ingresar(
            currentUser,
            favorito.getNombre(),
            favorito.getCostoFobUSD(),
            0.0, // Flete por defecto
            favorito.getMargen() * 100 // Convertir margen a porcentaje
        );
        costeoForm.setVisible(true);
        this.dispose();
    });
}

// M√©todo auxiliar para realizar la b√∫squeda
private void realizarBusqueda() {
    String valorBusqueda = searchField.getText().toLowerCase().trim();
    
    if (valorBusqueda.equals("buscar")) {
        return;
    }
    
    // Obtener todos los usuarios
    List<String[]> usuarios = adminUsuario.listarUsuarios();
    tableModel.setRowCount(0); // Limpiar la tabla
    
    if (valorBusqueda.isEmpty()) {
        loadUsers(); // Si la b√∫squeda est√° vac√≠a, mostrar todos los usuarios
        return;
    }
    
    // Filtrar usuarios seg√∫n el criterio de b√∫squeda
    for (String[] usuario : usuarios) {
        // No mostrar el usuario admin en los resultados
        if (!"admin".equals(usuario[0])) {
            // Buscar en username y email
            if (usuario[0].toLowerCase().contains(valorBusqueda) || // username
                usuario[1].toLowerCase().contains(valorBusqueda))   // email
            {
                tableModel.addRow(new Object[]{
                    usuario[0], // username
                    usuario[1], // email
                    "********" // contrase√±a oculta
                });
            }
        }
    }
    
    if (tableModel.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this,
            "No se encontraron usuarios que coincidan con la b√∫squeda.",
            "Sin resultados",
            JOptionPane.INFORMATION_MESSAGE);
        loadUsers(); // Recargar todos los usuarios
    }
}

// Agregar este m√©todo en el constructor despu√©s de initComponents()
private void configurarBuscador() {
    searchField.setText("Buscar");
    searchField.setForeground(Color.GRAY);
    
    searchField.addFocusListener(new FocusListener() {
        @Override
        public void focusGained(FocusEvent e) {
            if (searchField.getText().equals("Buscar")) {
                searchField.setText("");
                searchField.setForeground(Color.BLACK);
            }
        }
        
        @Override
        public void focusLost(FocusEvent e) {
            if (searchField.getText().isEmpty()) {
                searchField.setText("Buscar");
                searchField.setForeground(Color.GRAY);
            }
        }
    });
    
    // Agregar listener para b√∫squeda en tiempo real
    searchField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
        @Override
        public void insertUpdate(javax.swing.event.DocumentEvent e) {
            if (!searchField.getText().equals("Buscar")) {
                realizarBusqueda();
            }
        }

        @Override
        public void removeUpdate(javax.swing.event.DocumentEvent e) {
            if (!searchField.getText().equals("Buscar")) {
                realizarBusqueda();
            }
        }

        @Override
        public void changedUpdate(javax.swing.event.DocumentEvent e) {
            if (!searchField.getText().equals("Buscar")) {
                realizarBusqueda();
            }
        }
    });
}

// M√©todo para eliminar un producto favorito
private void eliminarProductoFavorito(ProductoFavorito favorito) {
    int confirmacion = JOptionPane.showConfirmDialog(this,
        "¬øEst√°s seguro de que deseas eliminar '" + favorito.getNombre() + "' de tus favoritos?",
        "Confirmar Eliminaci√≥n",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE);
        
    if (confirmacion == JOptionPane.YES_OPTION) {
        try {
            FavoritosManager favoritosManager = new FavoritosManager();
            favoritosManager.eliminarFavorito(favorito, currentUser);
            
            JOptionPane.showMessageDialog(this,
                "Producto eliminado de favoritos exitosamente",
                "√âxito",
                JOptionPane.INFORMATION_MESSAGE);
                
            // Actualizar la vista de favoritos
            favoritosActionPerformed(null);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error al eliminar el favorito: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionUsuarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnVerProductos;
    private javax.swing.JButton favoritos;
    private javax.swing.JButton flechaDerecha;
    private javax.swing.JButton flechaIzquierda;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton menuButton;
    private javax.swing.JButton recargar;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
